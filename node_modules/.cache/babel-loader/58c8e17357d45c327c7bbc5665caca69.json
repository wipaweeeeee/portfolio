{"ast":null,"code":"'use strict';\n\nvar isArray = require('lodash/isArray');\n\nvar isPlainObject = require('lodash/isPlainObject');\n\nvar assign = require('lodash/assign');\n\nvar forEach = require('lodash/forEach');\n\nvar map = require('lodash/map');\n\nvar deprecate = require('./deprecate');\n\nvar Query = require('./query');\n\nvar Record = require('./record');\n\nvar callbackToPromise = require('./callback_to_promise');\n\nfunction Table(base, tableId, tableName) {\n  if (!tableId && !tableName) {\n    throw new Error('Table name or table ID is required');\n  }\n\n  this._base = base;\n  this.id = tableId;\n  this.name = tableName; // Public API\n\n  this.find = callbackToPromise(this._findRecordById, this);\n  this.select = this._selectRecords.bind(this);\n  this.create = callbackToPromise(this._createRecords, this);\n  this.update = callbackToPromise(this._updateRecords.bind(this, false), this);\n  this.replace = callbackToPromise(this._updateRecords.bind(this, true), this);\n  this.destroy = callbackToPromise(this._destroyRecord, this); // Deprecated API\n\n  this.list = deprecate(this._listRecords.bind(this), 'table.list', 'Airtable: `list()` is deprecated. Use `select()` instead.');\n  this.forEach = deprecate(this._forEachRecord.bind(this), 'table.forEach', 'Airtable: `forEach()` is deprecated. Use `select()` instead.');\n}\n\nTable.prototype._findRecordById = function (recordId, done) {\n  var record = new Record(this, recordId);\n  record.fetch(done);\n};\n\nTable.prototype._selectRecords = function (params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  if (arguments.length > 1) {\n    console.warn('Airtable: `select` takes only one parameter, but it was given ' + arguments.length + ' parameters. ' + 'Use `eachPage` or `firstPage` to fetch records.');\n  }\n\n  if (isPlainObject(params)) {\n    var validationResults = Query.validateParams(params);\n\n    if (validationResults.errors.length) {\n      var formattedErrors = map(validationResults.errors, function (error) {\n        return '  * ' + error;\n      });\n      throw new Error('Airtable: invalid parameters for `select`:\\n' + formattedErrors.join('\\n'));\n    }\n\n    if (validationResults.ignoredKeys.length) {\n      console.warn('Airtable: the following parameters to `select` will be ignored: ' + validationResults.ignoredKeys.join(', '));\n    }\n\n    return new Query(this, validationResults.validParams);\n  } else {\n    throw new Error('Airtable: the parameter for `select` should be a plain object or undefined.');\n  }\n};\n\nTable.prototype._urlEncodedNameOrId = function () {\n  return this.id || encodeURIComponent(this.name);\n};\n\nTable.prototype._createRecords = function (recordsData, optionalParameters, done) {\n  var that = this;\n  var isCreatingMultipleRecords = isArray(recordsData);\n\n  if (!done) {\n    done = optionalParameters;\n    optionalParameters = {};\n  }\n\n  var requestData;\n\n  if (isCreatingMultipleRecords) {\n    requestData = {\n      records: recordsData\n    };\n  } else {\n    requestData = {\n      fields: recordsData\n    };\n  }\n\n  assign(requestData, optionalParameters);\n\n  this._base.runAction('post', '/' + that._urlEncodedNameOrId() + '/', {}, requestData, function (err, resp, body) {\n    if (err) {\n      done(err);\n      return;\n    }\n\n    var result;\n\n    if (isCreatingMultipleRecords) {\n      result = body.records.map(function (record) {\n        return new Record(that, record.id, record);\n      });\n    } else {\n      result = new Record(that, body.id, body);\n    }\n\n    done(null, result);\n  });\n};\n\nTable.prototype._updateRecords = function (isDestructiveUpdate, recordsDataOrRecordId, recordDataOrOptsOrDone, optsOrDone, done) {\n  var opts;\n\n  if (isArray(recordsDataOrRecordId)) {\n    var that = this;\n    var recordsData = recordsDataOrRecordId;\n    opts = isPlainObject(recordDataOrOptsOrDone) ? recordDataOrOptsOrDone : {};\n    done = optsOrDone || recordDataOrOptsOrDone;\n    var method = isDestructiveUpdate ? 'put' : 'patch';\n    var requestData = assign({\n      records: recordsData\n    }, opts);\n\n    this._base.runAction(method, '/' + this._urlEncodedNameOrId() + '/', {}, requestData, function (err, resp, body) {\n      if (err) {\n        done(err);\n        return;\n      }\n\n      var result = body.records.map(function (record) {\n        return new Record(that, record.id, record);\n      });\n      done(null, result);\n    });\n  } else {\n    var recordId = recordsDataOrRecordId;\n    var recordData = recordDataOrOptsOrDone;\n    opts = isPlainObject(optsOrDone) ? optsOrDone : {};\n    done = done || optsOrDone;\n    var record = new Record(this, recordId);\n\n    if (isDestructiveUpdate) {\n      record.putUpdate(recordData, opts, done);\n    } else {\n      record.patchUpdate(recordData, opts, done);\n    }\n  }\n};\n\nTable.prototype._destroyRecord = function (recordIdsOrId, done) {\n  if (isArray(recordIdsOrId)) {\n    var that = this;\n    var queryParams = {\n      records: recordIdsOrId\n    };\n\n    this._base.runAction('delete', '/' + this._urlEncodedNameOrId(), queryParams, null, function (err, response, results) {\n      if (err) {\n        done(err);\n        return;\n      }\n\n      var records = map(results.records, function (recordJson) {\n        return new Record(that, recordJson.id, null);\n      });\n      done(null, records);\n    });\n  } else {\n    var record = new Record(this, recordIdsOrId);\n    record.destroy(done);\n  }\n};\n\nTable.prototype._listRecords = function (limit, offset, opts, done) {\n  var that = this;\n\n  if (!done) {\n    done = opts;\n    opts = {};\n  }\n\n  var listRecordsParameters = assign({\n    limit: limit,\n    offset: offset\n  }, opts);\n\n  this._base.runAction('get', '/' + this._urlEncodedNameOrId() + '/', listRecordsParameters, null, function (err, response, results) {\n    if (err) {\n      done(err);\n      return;\n    }\n\n    var records = map(results.records, function (recordJson) {\n      return new Record(that, null, recordJson);\n    });\n    done(null, records, results.offset);\n  });\n};\n\nTable.prototype._forEachRecord = function (opts, callback, done) {\n  if (arguments.length === 2) {\n    done = callback;\n    callback = opts;\n    opts = {};\n  }\n\n  var that = this;\n  var limit = Table.__recordsPerPageForIteration || 100;\n  var offset = null;\n\n  var nextPage = function () {\n    that._listRecords(limit, offset, opts, function (err, page, newOffset) {\n      if (err) {\n        done(err);\n        return;\n      }\n\n      forEach(page, callback);\n\n      if (newOffset) {\n        offset = newOffset;\n        nextPage();\n      } else {\n        done();\n      }\n    });\n  };\n\n  nextPage();\n};\n\nmodule.exports = Table;","map":null,"metadata":{},"sourceType":"script"}