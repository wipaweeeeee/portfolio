{"ast":null,"code":"'use strict';\n\nvar forEach = require('lodash/forEach');\n\nvar get = require('lodash/get');\n\nvar assign = require('lodash/assign');\n\nvar isPlainObject = require('lodash/isPlainObject'); // This will become require('xhr') in the browser.\n\n\nvar request = require('request');\n\nvar AirtableError = require('./airtable_error');\n\nvar Table = require('./table');\n\nvar HttpHeaders = require('./http_headers');\n\nvar runAction = require('./run_action');\n\nvar packageVersion = require('./package_version');\n\nvar exponentialBackoffWithJitter = require('./exponential_backoff_with_jitter');\n\nvar Promise = require('./promise');\n\nvar userAgent = 'Airtable.js/' + packageVersion;\n\nfunction Base(airtable, baseId) {\n  this._airtable = airtable;\n  this._id = baseId;\n}\n\nBase.prototype.table = function (tableName) {\n  return new Table(this, null, tableName);\n};\n\nBase.prototype.makeRequest = function (options) {\n  var that = this;\n  options = options || {};\n  var method = get(options, 'method', 'GET').toUpperCase();\n  var requestOptions = {\n    method: method,\n    url: this._airtable._endpointUrl + '/v' + this._airtable._apiVersionMajor + '/' + this._id + get(options, 'path', '/'),\n    qs: get(options, 'qs', {}),\n    headers: this._getRequestHeaders(get(options, 'headers', {})),\n    json: true,\n    timeout: this._airtable.requestTimeout\n  };\n\n  if ('body' in options && _canRequestMethodIncludeBody(method)) {\n    requestOptions.body = options.body;\n  }\n\n  return new Promise(function (resolve, reject) {\n    request(requestOptions, function (err, response, body) {\n      if (!err && response.statusCode === 429 && !that._airtable._noRetryIfRateLimited) {\n        var numAttempts = get(options, '_numAttempts', 0);\n        var backoffDelayMs = exponentialBackoffWithJitter(numAttempts);\n        setTimeout(function () {\n          var newOptions = assign({}, options, {\n            _numAttempts: numAttempts + 1\n          });\n          that.makeRequest(newOptions).then(resolve).catch(reject);\n        }, backoffDelayMs);\n        return;\n      }\n\n      if (err) {\n        err = new AirtableError('CONNECTION_ERROR', err.message, null);\n      } else {\n        err = that._checkStatusForError(response.statusCode, body) || _getErrorForNonObjectBody(response.statusCode, body);\n      }\n\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve({\n        statusCode: response.statusCode,\n        headers: response.headers,\n        body: body\n      });\n    });\n  });\n}; // This method is deprecated.\n\n\nBase.prototype.runAction = function (method, path, queryParams, bodyData, callback) {\n  runAction(this, method, path, queryParams, bodyData, callback, 0);\n};\n\nBase.prototype._getRequestHeaders = function (headers) {\n  var result = new HttpHeaders();\n  result.set('Authorization', 'Bearer ' + this._airtable._apiKey);\n  result.set('User-Agent', userAgent);\n  forEach(headers, function (headerValue, headerKey) {\n    result.set(headerKey, headerValue);\n  });\n  return result.toJSON();\n};\n\nBase.prototype._checkStatusForError = function (statusCode, body) {\n  if (statusCode === 401) {\n    return new AirtableError('AUTHENTICATION_REQUIRED', 'You should provide valid api key to perform this operation', statusCode);\n  } else if (statusCode === 403) {\n    return new AirtableError('NOT_AUTHORIZED', 'You are not authorized to perform this operation', statusCode);\n  } else if (statusCode === 404) {\n    return function () {\n      var message = body && body.error && body.error.message ? body.error.message : 'Could not find what you are looking for';\n      return new AirtableError('NOT_FOUND', message, statusCode);\n    }();\n  } else if (statusCode === 413) {\n    return new AirtableError('REQUEST_TOO_LARGE', 'Request body is too large', statusCode);\n  } else if (statusCode === 422) {\n    return function () {\n      var type = body && body.error && body.error.type ? body.error.type : 'UNPROCESSABLE_ENTITY';\n      var message = body && body.error && body.error.message ? body.error.message : 'The operation cannot be processed';\n      return new AirtableError(type, message, statusCode);\n    }();\n  } else if (statusCode === 429) {\n    return new AirtableError('TOO_MANY_REQUESTS', 'You have made too many requests in a short period of time. Please retry your request later', statusCode);\n  } else if (statusCode === 500) {\n    return new AirtableError('SERVER_ERROR', 'Try again. If the problem persists, contact support.', statusCode);\n  } else if (statusCode === 503) {\n    return new AirtableError('SERVICE_UNAVAILABLE', 'The service is temporarily unavailable. Please retry shortly.', statusCode);\n  } else if (statusCode >= 400) {\n    return function () {\n      var type = body && body.error && body.error.type ? body.error.type : 'UNEXPECTED_ERROR';\n      var message = body && body.error && body.error.message ? body.error.message : 'An unexpected error occurred';\n      return new AirtableError(type, message, statusCode);\n    }();\n  } else {\n    return null;\n  }\n};\n\nBase.prototype.doCall = function (tableName) {\n  return this.table(tableName);\n};\n\nBase.prototype.getId = function () {\n  return this._id;\n};\n\nBase.createFunctor = function (airtable, baseId) {\n  var base = new Base(airtable, baseId);\n\n  var baseFn = function () {\n    return base.doCall.apply(base, arguments);\n  };\n\n  forEach(['table', 'makeRequest', 'runAction', 'getId'], function (baseMethod) {\n    baseFn[baseMethod] = base[baseMethod].bind(base);\n  });\n  baseFn._base = base;\n  baseFn.tables = base.tables;\n  return baseFn;\n};\n\nfunction _canRequestMethodIncludeBody(method) {\n  return method !== 'GET' && method !== 'DELETE';\n}\n\nfunction _getErrorForNonObjectBody(statusCode, body) {\n  if (isPlainObject(body)) {\n    return null;\n  } else {\n    return new AirtableError('UNEXPECTED_ERROR', 'The response from Airtable was invalid JSON. Please try again soon.', statusCode);\n  }\n}\n\nmodule.exports = Base;","map":null,"metadata":{},"sourceType":"script"}